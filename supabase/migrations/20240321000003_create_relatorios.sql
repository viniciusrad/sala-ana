-- Create a table for daily reports
create table relatorios (
  id bigint generated by default as identity primary key,
  id_aluno uuid references auth.users on delete cascade not null,
  data_relatorio timestamp with time zone default timezone('utc'::text, now()) not null,
  conteudo text not null,
  dia_semana text not null check (dia_semana in ('Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta')),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Set up Row Level Security (RLS)
alter table relatorios enable row level security;

-- Create policies
create policy "Alunos podem ver seus próprios relatórios"
  on relatorios for select
  using (auth.uid() = id_aluno);

create policy "Alunos podem criar seus próprios relatórios"
  on relatorios for insert
  with check (auth.uid() = id_aluno);

create policy "Alunos podem atualizar seus próprios relatórios"
  on relatorios for update
  using (auth.uid() = id_aluno);

create policy "Professores e admins podem ver todos os relatórios"
  on relatorios for select
  using (
    exists (
      select 1
      from profiles
      where profiles.id = auth.uid()
      and profiles.tipo_usuario in ('professor', 'admin')
    )
  );

-- Create a trigger to automatically set updated_at
create trigger set_relatorios_updated_at
  before update on relatorios
  for each row
  execute function handle_updated_at(); 